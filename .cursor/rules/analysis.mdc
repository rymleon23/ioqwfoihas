# Rule: analysis

## Scope

Applies to the Analysis and Dashboards module. This rule covers widget authoring, KPI math, and the APIs that serve aggregated data.

## Data model and aggregation

* Store events in the `AnalyticsEvent` table with detailed payloads for actions such as `task_completed`, `post_published`, and `triage_event`. Other services push events into this table.
* The Analysis service reads from the primary database or the warehouse, and computes KPIs in daily batches or on demand for realtime views.
* Create materialized views or caches for heavy metrics (velocity, lead time) so dashboards load quickly.
* Every widget needs a specification that includes name, type, fields, filters, and calculation method.

## Widget definition

* Define each widget with the schema `{ id, name, type, query, xField, yField, filters }`.
* Supported `type` values include `bar`, `line`, `pie`, `scatter`, and `burndown`.
* The `query` must identify the data source (AnalyticsEvent or related tables) and the aggregation (sum, average, count, etc.).
* `filters` describe which parameters users can adjust (teamId, projectId, date range, phaseId).

## API contract

* `GET /dashboards` returns the dashboards available to the user plus their widgets.
* `POST /dashboards` creates a dashboard from `{ name, widgets }`.
* `GET /widgets/{id}/data?filters=...` returns label and series data for the requested widget.
* `POST /widgets` allows users to create widgets (vNext). The server must validate each query and reject anything unsafe or overly expensive.

## KPI calculations

* **Velocity**: Sum `estimate` for Tasks whose state category is `completed` within a Phase.
* **Lead time**: Average of `completedAt - createdAt` for completed Tasks within the chosen window.
* **Triage time**: Average of `firstActionAt - createdAt` for Tasks that received Accept or Decline decisions.
* **Engagement rate**: `(likes + comments + shares) / reach`.
* **Posting cadence**: Histogram of publish times; count posts per hour or per day.

## Anti-patterns

* Do not query production tables directly during peak hours; rely on read replicas or the warehouse.
* Do not allow users to inject raw SQL into widget definitions.
* Do not expose sensitive personal data (emails, phone numbers) on dashboards; only show aggregated metrics.

